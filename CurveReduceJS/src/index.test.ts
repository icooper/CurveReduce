import {
    Point,
    ShortestDistance,
    PerpendicularDistance,
    MaxDistance,
    BinarySearch,
    Simplify,
    SimplifyTo
} from '.';

//#region ShortestDistance
test('shortest distance, 0-length line', () => {
    const p: Point = { x: 0, y: 0 };
    const a: Point = { x: 1, y: 0 };
    const b: Point = { x: 1, y: 0 };
    expect(ShortestDistance(p, a, b)).toEqual(1);
});
test('shortest distance to horizontal line', () => {
    const p: Point = { x: 0, y: 1 };
    const a: Point = { x: -1, y: 0 };
    const b: Point = { x: 1, y: 0 };
    expect(ShortestDistance(p, a, b)).toEqual(1);
});
test('shortest distance to vertical line', () => {
    const p: Point = { x: 1, y: 0 };
    const a: Point = { x: 0, y: -1 };
    const b: Point = { x: 0, y: 1 };
    expect(ShortestDistance(p, a, b)).toEqual(1);
});
test('shortest distance to 45-degree line', () => {
    const p: Point = { x: 0, y: 0 };
    const a: Point = { x: 2, y: 0 };
    const b: Point = { x: 0, y: 2 };
    expect(ShortestDistance(p, a, b)).toBeCloseTo(Math.SQRT2, 10);
});
test('shortest distance to sloped line', () => {
    const p: Point = { x: 0, y: 0 };
    const a: Point = { x: 5, y: 0 };
    const b: Point = { x: 0, y: 4.0 / Math.cos(Math.PI / 2.0 - Math.atan(0.75)) };
    expect(ShortestDistance(p, a, b)).toBeCloseTo(4, 10);
});
test('shortest distance to line, closest to point A', () => {
    const p: Point = { x: 0, y: 0 };
    const a: Point = { x: 1, y: 0 };
    const b: Point = { x: 2, y: 0 };
    expect(ShortestDistance(p, a, b)).toEqual(1);
});
test('shortest distance to line, closest to point B', () => {
    const p: Point = { x: 3, y: 0 };
    const a: Point = { x: 1, y: 0 };
    const b: Point = { x: 2, y: 0 };
    expect(ShortestDistance(p, a, b)).toEqual(1);
});
//#endregion

//#region PerpendicularDistance
test('perpendicular distance, 0-length line', () => {
    const p: Point = { x: 0, y: 0 };
    const a: Point = { x: 1, y: 0 };
    const b: Point = { x: 1, y: 0 };
    expect(PerpendicularDistance(p, a, b)).toEqual(1);
});
test('perpendicular distance to horizontal line', () => {
    const p: Point = { x: 0, y: 1 };
    const a: Point = { x: -1, y: 0 };
    const b: Point = { x: 1, y: 0 };
    expect(PerpendicularDistance(p, a, b)).toEqual(1);
});
test('perpendicular distance to vertical line', () => {
    const p: Point = { x: 1, y: 0 };
    const a: Point = { x: 0, y: -1 };
    const b: Point = { x: 0, y: 1 };
    expect(PerpendicularDistance(p, a, b)).toEqual(1);
});
test('perpendicular distance to 45-degree line', () => {
    const p: Point = { x: 0, y: 0 };
    const a: Point = { x: 2, y: 0 };
    const b: Point = { x: 0, y: 2 };
    expect(PerpendicularDistance(p, a, b)).toBeCloseTo(Math.SQRT2, 10);
});
test('perpendicular distance to sloped line', () => {
    const p: Point = { x: 0, y: 0 };
    const a: Point = { x: 5, y: 0 };
    const b: Point = { x: 0, y: 4.0 / Math.cos(Math.PI / 2.0 - Math.atan(0.75)) };
    expect(PerpendicularDistance(p, a, b)).toBeCloseTo(4, 10);
});
//#endregion

//#region MaxDistance
test('max distance, 1 point', () => {
    const points: Point[] = [ { x: 0, y: 0 } ];
    expect(MaxDistance(points)).toStrictEqual({ distance: 0, index: -1 });
});
test('max distance, 2 points', () => {
    const points: Point[] = [ { x: 0, y: 0 }, { x: 1, y: 1 }];
    expect(MaxDistance(points)).toStrictEqual({ distance: 0, index: -1 });
});
test('max distance, 3 points', () => {
    const points: Point[] = [
        { x: 0, y: 0 },
        { x: 2, y: 2 },
        { x: 4, y: 0 }
    ];
    const max = MaxDistance(points, PerpendicularDistance);
    expect(max.distance).toEqual(2);
    expect(max.index).toEqual(1);
});
test('max distance, 4 points', () => {
    const points: Point[] = [
        { x: -2, y: 4 },
        { x: 0, y: 2 },
        { x: 0, y: 0 },
        { x: 2, y: 0 }
    ];
    const max = MaxDistance(points, PerpendicularDistance);
    expect(max.distance).toBeCloseTo(Math.SQRT2, 10);
    expect(max.index).toEqual(2);
});
test('max distance with custom function', () => {
    const points: Point[] = [
        { x: -2, y: 4 },
        { x: 0, y: 2 },
        { x: 0, y: 0 },
        { x: 2, y: 0 }
    ];
    const max = MaxDistance(points, () => 42);
    expect(max.distance).toEqual(42);
    expect(max.index).toEqual(1);
});
//#endregion

//#region BinarySearch
test('binary search, found', () => {
    const arr = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];
    expect(BinarySearch(a => 6 - arr[a], 0, arr.length - 1)).toEqual(6);
});
test('binary search, within range', () => {
    const arr = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];
    expect(BinarySearch(a => 5.5 - arr[a], 0, arr.length - 1)).toEqual(6);
});
test('binary search, bigger than max', () => {
    const arr = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];
    expect(BinarySearch(a => 10 - arr[a], 0, arr.length - 1)).toEqual(9);
});
test('binary search, less than min', () => {
    const arr = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];
    expect(BinarySearch(a => -1 - arr[a], 0, arr.length - 1)).toEqual(0);
});
test('binary search, min > max', () => {
    expect(BinarySearch(_ => 1, 1, 0)).toEqual(0);
})
//#endregion

//#region Simplify, generic
test('simplify, epsilon < 0', () => {
    expect(() => Simplify([], -1)).toThrowError();
});
test('simplify, 1 point', () => {
    const points: Point[] = [ { x: 0, y: 0 } ];
    expect(Simplify(points, 1)).toStrictEqual(points);
});
test('simplify, 2 points', () => {
    const points: Point[] = [ { x: 0, y: 0 }, { x: 1, y: 1 }];
    expect(Simplify(points, 1)).toStrictEqual(points);
});
//#endregion

//#region Simplify, ShortestDistance
test('simplify, 3 points, small epsilon, shortest distance', () => {
    const points: Point[] = [
        { x: 0, y: 0 },
        { x: 2, y: 2 },
        { x: 4, y: 0 }
    ];
    expect(Simplify(points, 1, ShortestDistance)).toStrictEqual(points);
});
test('simplify, 3 points, large epsilon, shortest distance', () => {
    const points: Point[] = [
        { x: 0, y: 0 },
        { x: 2, y: 2 },
        { x: 4, y: 0 }
    ];
    expect(Simplify(points, 2, ShortestDistance)).toStrictEqual([ points[0], points[2] ]);
});
test('simplify, 4 points, small epsilon, shortest distance', () => {
    const points: Point[] = [
        { x: -2, y: 4 },
        { x: 0, y: 2 },
        { x: 0, y: 0 },
        { x: 2, y: 0 }
    ];
    expect(Simplify(points, 0.5, ShortestDistance)).toStrictEqual(points);
});
test('simplify, 4 points, medium epsilon, shortest distance', () => {
    const points: Point[] = [
        { x: -2, y: 4 },
        { x: 0, y: 2 },
        { x: 0, y: 0 },
        { x: 2, y: 0 }
    ];
    expect(Simplify(points, 1, ShortestDistance)).toStrictEqual([ points[0], points[2], points[3] ]);
});
test('simplify, 4 points, large epsilon, shortest distance', () => {
    const points: Point[] = [
        { x: -2, y: 4 },
        { x: 0, y: 2 },
        { x: 0, y: 0 },
        { x: 2, y: 0 }
    ];
    expect(Simplify(points, 2, ShortestDistance)).toStrictEqual([ points[0], points[3] ]);
});
//#endregion

//#region Simplify, PerpendicularDistance
test('simplify, 3 points, small epsilon, perpendicular distance', () => {
    const points: Point[] = [
        { x: 0, y: 0 },
        { x: 2, y: 2 },
        { x: 4, y: 0 }
    ];
    expect(Simplify(points, 1, PerpendicularDistance)).toStrictEqual(points);
});
test('simplify, 3 points, large epsilon, perpendicular distance', () => {
    const points: Point[] = [
        { x: 0, y: 0 },
        { x: 2, y: 2 },
        { x: 4, y: 0 }
    ];
    expect(Simplify(points, 2, PerpendicularDistance)).toStrictEqual([ points[0], points[2] ]);
});
test('simplify, 4 points, small epsilon, perpendicular distance', () => {
    const points: Point[] = [
        { x: -2, y: 4 },
        { x: 0, y: 2 },
        { x: 0, y: 0 },
        { x: 2, y: 0 }
    ];
    expect(Simplify(points, 0.5, PerpendicularDistance)).toStrictEqual(points);
});
test('simplify, 4 points, medium epsilon, perpendicular distance', () => {
    const points: Point[] = [
        { x: -2, y: 4 },
        { x: 0, y: 2 },
        { x: 0, y: 0 },
        { x: 2, y: 0 }
    ];
    expect(Simplify(points, 1, PerpendicularDistance)).toStrictEqual([ points[0], points[2], points[3] ]);
});
test('simplify, 4 points, large epsilon, perpendicular distance', () => {
    const points: Point[] = [
        { x: -2, y: 4 },
        { x: 0, y: 2 },
        { x: 0, y: 0 },
        { x: 2, y: 0 }
    ];
    expect(Simplify(points, 2, PerpendicularDistance)).toStrictEqual([ points[0], points[3] ]);
});
//#endregion

//#region SimplifyTo, ShortestDistance
test('simplify to 1 point, shortest distance', () => {
    const points = [ { x: 1.20401E-09, y: -0.00120428 }, { x: 0.018, y: 0.241799 }, { x: 0.1044, y: 1.34392 }, { x: 0.1494, y: 1.89758 }, { x: 0.2178, y: 2.67942 }, { x: 0.5247, y: 6.91973 }, { x: 1.269, y: 14.8002 }, { x: 1.6371, y: 18.0504 }, { x: 2.2104, y: 22.3001 }, { x: 2.5893, y: 24.7082 }, { x: 3.1806, y: 27.6589 }, { x: 3.9924, y: 30.4127 }, { x: 4.4073, y: 31.39 }, { x: 5.2713, y: 32.8131 }, { x: 5.9382, y: 33.5356 }, { x: 6.8382, y: 34.1971 }, { x: 7.7517, y: 34.599 }, { x: 8.6814, y: 34.8161 }, { x: 9.8613, y: 34.904 }, { x: 10.4173, y: 34.8803 }, { x: 11.1417, y: 34.8032 }, { x: 11.865, y: 34.6729 }, { x: 12.9515, y: 34.4192 }, { x: 14.0371, y: 34.13 }, { x: 14.7603, y: 33.9307 }, { x: 16.2079, y: 33.5205 }, { x: 16.9323, y: 33.3147 }, { x: 18.0181, y: 33.0196 }, { x: 19.4648, y: 32.6417 }, { x: 20.1892, y: 32.453 }, { x: 20.9134, y: 32.2699 }, { x: 21.6373, y: 32.0942 }, { x: 22.36, y: 31.9221 }, { x: 23.0845, y: 31.7573 }, { x: 24.5326, y: 31.435 }, { x: 25.2555, y: 31.2795 }, { x: 25.9798, y: 31.1348 }, { x: 27.4278, y: 30.8467 }, { x: 28.8751, y: 30.5719 }, { x: 30.3234, y: 30.3101 }, { x: 31.0461, y: 30.1809 }, { x: 32.1322, y: 29.9963 }, { x: 33.2184, y: 29.8226 }, { x: 34.6657, y: 29.5867 }, { x: 35.7514, y: 29.4231 }, { x: 36.4754, y: 29.3182 }, { x: 37.5612, y: 29.1651 }, { x: 39.3705, y: 28.9197 }, { x: 40.4564, y: 28.7797 }, { x: 42.2661, y: 28.5613 }, { x: 43.7134, y: 28.3835 }, { x: 45.1612, y: 28.2194 }, { x: 46.6087, y: 28.0604 }, { x: 47.3327, y: 27.9812 }, { x: 48.0567, y: 27.9055 }, { x: 48.7811, y: 27.83 }, { x: 50.5904, y: 27.6477 }, { x: 52.0378, y: 27.5109 }, { x: 53.1232, y: 27.4082 }, { x: 54.9332, y: 27.251 }, { x: 56.0185, y: 27.1584 }, { x: 57.1038, y: 27.0701 }, { x: 58.5527, y: 26.9543 }, { x: 59.6379, y: 26.8715 }, { x: 60.7239, y: 26.7892 }, { x: 62.1717, y: 26.6807 }, { x: 63.2575, y: 26.6065 }, { x: 64.3433, y: 26.5366 }, { x: 65.4286, y: 26.4584 }, { x: 66.1529, y: 26.4133 }, { x: 66.8761, y: 26.3701 }, { x: 67.9623, y: 26.3016 }, { x: 69.0481, y: 26.2356 }, { x: 69.7714, y: 26.1927 }, { x: 70.8578, y: 26.1324 }, { x: 71.5807, y: 26.0938 }, { x: 73.3904, y: 25.9954 }, { x: 74.1143, y: 25.953 }, { x: 74.8387, y: 25.918 }, { x: 76.286, y: 25.8486 }, { x: 77.01, y: 25.8149 }, { x: 77.7343, y: 25.7787 }, { x: 78.8199, y: 25.7266 }, { x: 80.6293, y: 25.6524 }, { x: 82.4392, y: 25.5782 }, { x: 83.1619, y: 25.5492 }, { x: 84.9719, y: 25.4842 }, { x: 86.7816, y: 25.421 }, { x: 87.5059, y: 25.3962 }, { x: 88.5912, y: 25.3638 }, { x: 89.3155, y: 25.3418 }, { x: 90.0387, y: 25.3214 }, { x: 91.1249, y: 25.2914 }, { x: 92.2106, y: 25.2578 }, { x: 93.2966, y: 25.2301 }, { x: 94.7432, y: 25.189 }, { x: 95.8293, y: 25.1627 }, { x: 96.9156, y: 25.1362 }, { x: 97.6382, y: 25.1209 }, { x: 98.3628, y: 25.1058 }, { x: 99.0872, y: 25.0926 }, { x: 100.534, y: 25.0648 }, { x: 101.258, y: 25.0517 }, { x: 102.344, y: 25.0337 }, { x: 103.429, y: 25.0138 }, { x: 104.878, y: 24.9899 }, { x: 106.688, y: 24.9631 }, { x: 107.773, y: 24.9493 }, { x: 108.858, y: 24.9377 }, { x: 109.583, y: 24.933 }, { x: 110.306, y: 24.9261 }, { x: 111.392, y: 24.9175 }, { x: 112.115, y: 24.9104 }, { x: 112.84, y: 24.9088 }, { x: 114.287, y: 24.8994 }, { x: 115.373, y: 24.8961 }, { x: 117.183, y: 24.8923 }, { x: 118.269, y: 24.8906 }, { x: 119.354, y: 24.8896 }, { x: 121.164, y: 24.8829 }, { x: 121.887, y: 24.8809 }, { x: 122.974, y: 24.8806 }, { x: 124.421, y: 24.8773 }, { x: 125.145, y: 24.8776 }, { x: 125.869, y: 24.883 }, { x: 127.316, y: 24.8808 }, { x: 128.764, y: 24.8861 }, { x: 129.85, y: 24.8953 }, { x: 130.936, y: 24.8972 }, { x: 131.659, y: 24.9034 }, { x: 133.107, y: 24.9107 }, { x: 133.831, y: 24.9139 }, { x: 134.916, y: 24.9186 }, { x: 136.002, y: 24.9269 }, { x: 137.45, y: 24.9386 }, { x: 138.173, y: 24.9428 }, { x: 139.622, y: 24.9513 }, { x: 141.068, y: 24.9584 }, { x: 142.517, y: 24.9644 }, { x: 143.241, y: 24.9674 }, { x: 143.963, y: 24.9708 }, { x: 145.05, y: 24.9757 }, { x: 146.859, y: 24.9872 }, { x: 147.584, y: 24.9901 }, { x: 148.308, y: 24.9883 }, { x: 149.031, y: 24.9938 }, { x: 149.754, y: 24.9976 }, { x: 150.479, y: 25.0018 }, { x: 151.203, y: 25.0094 }, { x: 151.927, y: 25.0118 }, { x: 152.65, y: 25.0161 }, { x: 153.736, y: 25.0286 }, { x: 155.183, y: 25.0368 }, { x: 156.269, y: 25.0525 }, { x: 156.994, y: 25.0633 }, { x: 157.718, y: 25.074 }, { x: 160.974, y: 25.1281 }, { x: 161.698, y: 25.1416 }, { x: 163.146, y: 25.1691 }, { x: 163.87, y: 25.1818 }, { x: 164.594, y: 25.1939 }, { x: 165.317, y: 25.2092 }, { x: 166.041, y: 25.2276 }, { x: 167.489, y: 25.2626 }, { x: 168.575, y: 25.2875 }, { x: 169.299, y: 25.3027 }, { x: 170.022, y: 25.3221 }, { x: 170.746, y: 25.3423 }, { x: 171.832, y: 25.3681 }, { x: 173.28, y: 25.4073 }, { x: 174.003, y: 25.4242 }, { x: 175.09, y: 25.4554 }, { x: 175.812, y: 25.4752 }, { x: 177.261, y: 25.5176 }, { x: 177.985, y: 25.5419 }, { x: 179.432, y: 25.5877 }, { x: 180.518, y: 25.6204 }, { x: 182.689, y: 25.69 }, { x: 183.775, y: 25.7234 }, { x: 185.222, y: 25.7738 }, { x: 186.671, y: 25.8215 }, { x: 188.118, y: 25.8727 }, { x: 188.842, y: 25.8953 }, { x: 189.927, y: 25.9282 }, { x: 190.652, y: 25.9477 }, { x: 191.375, y: 25.965 }, { x: 192.461, y: 25.9954 }, { x: 193.184, y: 26.0178 }, { x: 194.633, y: 26.0538 }, { x: 195.718, y: 26.0786 }, { x: 197.166, y: 26.1166 }, { x: 197.889, y: 26.1354 }, { x: 198.975, y: 26.1596 }, { x: 199.699, y: 26.1729 } ];
    expect(SimplifyTo(points, 1)).toStrictEqual([ points[0], points[points.length - 1] ]);
});
test('simplify to 20 points, shortest distance', () => {
    const points = [ { x: 1.20401E-09, y: -0.00120428 }, { x: 0.018, y: 0.241799 }, { x: 0.1044, y: 1.34392 }, { x: 0.1494, y: 1.89758 }, { x: 0.2178, y: 2.67942 }, { x: 0.5247, y: 6.91973 }, { x: 1.269, y: 14.8002 }, { x: 1.6371, y: 18.0504 }, { x: 2.2104, y: 22.3001 }, { x: 2.5893, y: 24.7082 }, { x: 3.1806, y: 27.6589 }, { x: 3.9924, y: 30.4127 }, { x: 4.4073, y: 31.39 }, { x: 5.2713, y: 32.8131 }, { x: 5.9382, y: 33.5356 }, { x: 6.8382, y: 34.1971 }, { x: 7.7517, y: 34.599 }, { x: 8.6814, y: 34.8161 }, { x: 9.8613, y: 34.904 }, { x: 10.4173, y: 34.8803 }, { x: 11.1417, y: 34.8032 }, { x: 11.865, y: 34.6729 }, { x: 12.9515, y: 34.4192 }, { x: 14.0371, y: 34.13 }, { x: 14.7603, y: 33.9307 }, { x: 16.2079, y: 33.5205 }, { x: 16.9323, y: 33.3147 }, { x: 18.0181, y: 33.0196 }, { x: 19.4648, y: 32.6417 }, { x: 20.1892, y: 32.453 }, { x: 20.9134, y: 32.2699 }, { x: 21.6373, y: 32.0942 }, { x: 22.36, y: 31.9221 }, { x: 23.0845, y: 31.7573 }, { x: 24.5326, y: 31.435 }, { x: 25.2555, y: 31.2795 }, { x: 25.9798, y: 31.1348 }, { x: 27.4278, y: 30.8467 }, { x: 28.8751, y: 30.5719 }, { x: 30.3234, y: 30.3101 }, { x: 31.0461, y: 30.1809 }, { x: 32.1322, y: 29.9963 }, { x: 33.2184, y: 29.8226 }, { x: 34.6657, y: 29.5867 }, { x: 35.7514, y: 29.4231 }, { x: 36.4754, y: 29.3182 }, { x: 37.5612, y: 29.1651 }, { x: 39.3705, y: 28.9197 }, { x: 40.4564, y: 28.7797 }, { x: 42.2661, y: 28.5613 }, { x: 43.7134, y: 28.3835 }, { x: 45.1612, y: 28.2194 }, { x: 46.6087, y: 28.0604 }, { x: 47.3327, y: 27.9812 }, { x: 48.0567, y: 27.9055 }, { x: 48.7811, y: 27.83 }, { x: 50.5904, y: 27.6477 }, { x: 52.0378, y: 27.5109 }, { x: 53.1232, y: 27.4082 }, { x: 54.9332, y: 27.251 }, { x: 56.0185, y: 27.1584 }, { x: 57.1038, y: 27.0701 }, { x: 58.5527, y: 26.9543 }, { x: 59.6379, y: 26.8715 }, { x: 60.7239, y: 26.7892 }, { x: 62.1717, y: 26.6807 }, { x: 63.2575, y: 26.6065 }, { x: 64.3433, y: 26.5366 }, { x: 65.4286, y: 26.4584 }, { x: 66.1529, y: 26.4133 }, { x: 66.8761, y: 26.3701 }, { x: 67.9623, y: 26.3016 }, { x: 69.0481, y: 26.2356 }, { x: 69.7714, y: 26.1927 }, { x: 70.8578, y: 26.1324 }, { x: 71.5807, y: 26.0938 }, { x: 73.3904, y: 25.9954 }, { x: 74.1143, y: 25.953 }, { x: 74.8387, y: 25.918 }, { x: 76.286, y: 25.8486 }, { x: 77.01, y: 25.8149 }, { x: 77.7343, y: 25.7787 }, { x: 78.8199, y: 25.7266 }, { x: 80.6293, y: 25.6524 }, { x: 82.4392, y: 25.5782 }, { x: 83.1619, y: 25.5492 }, { x: 84.9719, y: 25.4842 }, { x: 86.7816, y: 25.421 }, { x: 87.5059, y: 25.3962 }, { x: 88.5912, y: 25.3638 }, { x: 89.3155, y: 25.3418 }, { x: 90.0387, y: 25.3214 }, { x: 91.1249, y: 25.2914 }, { x: 92.2106, y: 25.2578 }, { x: 93.2966, y: 25.2301 }, { x: 94.7432, y: 25.189 }, { x: 95.8293, y: 25.1627 }, { x: 96.9156, y: 25.1362 }, { x: 97.6382, y: 25.1209 }, { x: 98.3628, y: 25.1058 }, { x: 99.0872, y: 25.0926 }, { x: 100.534, y: 25.0648 }, { x: 101.258, y: 25.0517 }, { x: 102.344, y: 25.0337 }, { x: 103.429, y: 25.0138 }, { x: 104.878, y: 24.9899 }, { x: 106.688, y: 24.9631 }, { x: 107.773, y: 24.9493 }, { x: 108.858, y: 24.9377 }, { x: 109.583, y: 24.933 }, { x: 110.306, y: 24.9261 }, { x: 111.392, y: 24.9175 }, { x: 112.115, y: 24.9104 }, { x: 112.84, y: 24.9088 }, { x: 114.287, y: 24.8994 }, { x: 115.373, y: 24.8961 }, { x: 117.183, y: 24.8923 }, { x: 118.269, y: 24.8906 }, { x: 119.354, y: 24.8896 }, { x: 121.164, y: 24.8829 }, { x: 121.887, y: 24.8809 }, { x: 122.974, y: 24.8806 }, { x: 124.421, y: 24.8773 }, { x: 125.145, y: 24.8776 }, { x: 125.869, y: 24.883 }, { x: 127.316, y: 24.8808 }, { x: 128.764, y: 24.8861 }, { x: 129.85, y: 24.8953 }, { x: 130.936, y: 24.8972 }, { x: 131.659, y: 24.9034 }, { x: 133.107, y: 24.9107 }, { x: 133.831, y: 24.9139 }, { x: 134.916, y: 24.9186 }, { x: 136.002, y: 24.9269 }, { x: 137.45, y: 24.9386 }, { x: 138.173, y: 24.9428 }, { x: 139.622, y: 24.9513 }, { x: 141.068, y: 24.9584 }, { x: 142.517, y: 24.9644 }, { x: 143.241, y: 24.9674 }, { x: 143.963, y: 24.9708 }, { x: 145.05, y: 24.9757 }, { x: 146.859, y: 24.9872 }, { x: 147.584, y: 24.9901 }, { x: 148.308, y: 24.9883 }, { x: 149.031, y: 24.9938 }, { x: 149.754, y: 24.9976 }, { x: 150.479, y: 25.0018 }, { x: 151.203, y: 25.0094 }, { x: 151.927, y: 25.0118 }, { x: 152.65, y: 25.0161 }, { x: 153.736, y: 25.0286 }, { x: 155.183, y: 25.0368 }, { x: 156.269, y: 25.0525 }, { x: 156.994, y: 25.0633 }, { x: 157.718, y: 25.074 }, { x: 160.974, y: 25.1281 }, { x: 161.698, y: 25.1416 }, { x: 163.146, y: 25.1691 }, { x: 163.87, y: 25.1818 }, { x: 164.594, y: 25.1939 }, { x: 165.317, y: 25.2092 }, { x: 166.041, y: 25.2276 }, { x: 167.489, y: 25.2626 }, { x: 168.575, y: 25.2875 }, { x: 169.299, y: 25.3027 }, { x: 170.022, y: 25.3221 }, { x: 170.746, y: 25.3423 }, { x: 171.832, y: 25.3681 }, { x: 173.28, y: 25.4073 }, { x: 174.003, y: 25.4242 }, { x: 175.09, y: 25.4554 }, { x: 175.812, y: 25.4752 }, { x: 177.261, y: 25.5176 }, { x: 177.985, y: 25.5419 }, { x: 179.432, y: 25.5877 }, { x: 180.518, y: 25.6204 }, { x: 182.689, y: 25.69 }, { x: 183.775, y: 25.7234 }, { x: 185.222, y: 25.7738 }, { x: 186.671, y: 25.8215 }, { x: 188.118, y: 25.8727 }, { x: 188.842, y: 25.8953 }, { x: 189.927, y: 25.9282 }, { x: 190.652, y: 25.9477 }, { x: 191.375, y: 25.965 }, { x: 192.461, y: 25.9954 }, { x: 193.184, y: 26.0178 }, { x: 194.633, y: 26.0538 }, { x: 195.718, y: 26.0786 }, { x: 197.166, y: 26.1166 }, { x: 197.889, y: 26.1354 }, { x: 198.975, y: 26.1596 }, { x: 199.699, y: 26.1729 } ];
    expect(SimplifyTo(points, 20).length).toEqual(20);
});
test('simplify to 1000 point, shortest distance', () => {
    const points = [ { x: 1.20401E-09, y: -0.00120428 }, { x: 0.018, y: 0.241799 }, { x: 0.1044, y: 1.34392 }, { x: 0.1494, y: 1.89758 }, { x: 0.2178, y: 2.67942 }, { x: 0.5247, y: 6.91973 }, { x: 1.269, y: 14.8002 }, { x: 1.6371, y: 18.0504 }, { x: 2.2104, y: 22.3001 }, { x: 2.5893, y: 24.7082 }, { x: 3.1806, y: 27.6589 }, { x: 3.9924, y: 30.4127 }, { x: 4.4073, y: 31.39 }, { x: 5.2713, y: 32.8131 }, { x: 5.9382, y: 33.5356 }, { x: 6.8382, y: 34.1971 }, { x: 7.7517, y: 34.599 }, { x: 8.6814, y: 34.8161 }, { x: 9.8613, y: 34.904 }, { x: 10.4173, y: 34.8803 }, { x: 11.1417, y: 34.8032 }, { x: 11.865, y: 34.6729 }, { x: 12.9515, y: 34.4192 }, { x: 14.0371, y: 34.13 }, { x: 14.7603, y: 33.9307 }, { x: 16.2079, y: 33.5205 }, { x: 16.9323, y: 33.3147 }, { x: 18.0181, y: 33.0196 }, { x: 19.4648, y: 32.6417 }, { x: 20.1892, y: 32.453 }, { x: 20.9134, y: 32.2699 }, { x: 21.6373, y: 32.0942 }, { x: 22.36, y: 31.9221 }, { x: 23.0845, y: 31.7573 }, { x: 24.5326, y: 31.435 }, { x: 25.2555, y: 31.2795 }, { x: 25.9798, y: 31.1348 }, { x: 27.4278, y: 30.8467 }, { x: 28.8751, y: 30.5719 }, { x: 30.3234, y: 30.3101 }, { x: 31.0461, y: 30.1809 }, { x: 32.1322, y: 29.9963 }, { x: 33.2184, y: 29.8226 }, { x: 34.6657, y: 29.5867 }, { x: 35.7514, y: 29.4231 }, { x: 36.4754, y: 29.3182 }, { x: 37.5612, y: 29.1651 }, { x: 39.3705, y: 28.9197 }, { x: 40.4564, y: 28.7797 }, { x: 42.2661, y: 28.5613 }, { x: 43.7134, y: 28.3835 }, { x: 45.1612, y: 28.2194 }, { x: 46.6087, y: 28.0604 }, { x: 47.3327, y: 27.9812 }, { x: 48.0567, y: 27.9055 }, { x: 48.7811, y: 27.83 }, { x: 50.5904, y: 27.6477 }, { x: 52.0378, y: 27.5109 }, { x: 53.1232, y: 27.4082 }, { x: 54.9332, y: 27.251 }, { x: 56.0185, y: 27.1584 }, { x: 57.1038, y: 27.0701 }, { x: 58.5527, y: 26.9543 }, { x: 59.6379, y: 26.8715 }, { x: 60.7239, y: 26.7892 }, { x: 62.1717, y: 26.6807 }, { x: 63.2575, y: 26.6065 }, { x: 64.3433, y: 26.5366 }, { x: 65.4286, y: 26.4584 }, { x: 66.1529, y: 26.4133 }, { x: 66.8761, y: 26.3701 }, { x: 67.9623, y: 26.3016 }, { x: 69.0481, y: 26.2356 }, { x: 69.7714, y: 26.1927 }, { x: 70.8578, y: 26.1324 }, { x: 71.5807, y: 26.0938 }, { x: 73.3904, y: 25.9954 }, { x: 74.1143, y: 25.953 }, { x: 74.8387, y: 25.918 }, { x: 76.286, y: 25.8486 }, { x: 77.01, y: 25.8149 }, { x: 77.7343, y: 25.7787 }, { x: 78.8199, y: 25.7266 }, { x: 80.6293, y: 25.6524 }, { x: 82.4392, y: 25.5782 }, { x: 83.1619, y: 25.5492 }, { x: 84.9719, y: 25.4842 }, { x: 86.7816, y: 25.421 }, { x: 87.5059, y: 25.3962 }, { x: 88.5912, y: 25.3638 }, { x: 89.3155, y: 25.3418 }, { x: 90.0387, y: 25.3214 }, { x: 91.1249, y: 25.2914 }, { x: 92.2106, y: 25.2578 }, { x: 93.2966, y: 25.2301 }, { x: 94.7432, y: 25.189 }, { x: 95.8293, y: 25.1627 }, { x: 96.9156, y: 25.1362 }, { x: 97.6382, y: 25.1209 }, { x: 98.3628, y: 25.1058 }, { x: 99.0872, y: 25.0926 }, { x: 100.534, y: 25.0648 }, { x: 101.258, y: 25.0517 }, { x: 102.344, y: 25.0337 }, { x: 103.429, y: 25.0138 }, { x: 104.878, y: 24.9899 }, { x: 106.688, y: 24.9631 }, { x: 107.773, y: 24.9493 }, { x: 108.858, y: 24.9377 }, { x: 109.583, y: 24.933 }, { x: 110.306, y: 24.9261 }, { x: 111.392, y: 24.9175 }, { x: 112.115, y: 24.9104 }, { x: 112.84, y: 24.9088 }, { x: 114.287, y: 24.8994 }, { x: 115.373, y: 24.8961 }, { x: 117.183, y: 24.8923 }, { x: 118.269, y: 24.8906 }, { x: 119.354, y: 24.8896 }, { x: 121.164, y: 24.8829 }, { x: 121.887, y: 24.8809 }, { x: 122.974, y: 24.8806 }, { x: 124.421, y: 24.8773 }, { x: 125.145, y: 24.8776 }, { x: 125.869, y: 24.883 }, { x: 127.316, y: 24.8808 }, { x: 128.764, y: 24.8861 }, { x: 129.85, y: 24.8953 }, { x: 130.936, y: 24.8972 }, { x: 131.659, y: 24.9034 }, { x: 133.107, y: 24.9107 }, { x: 133.831, y: 24.9139 }, { x: 134.916, y: 24.9186 }, { x: 136.002, y: 24.9269 }, { x: 137.45, y: 24.9386 }, { x: 138.173, y: 24.9428 }, { x: 139.622, y: 24.9513 }, { x: 141.068, y: 24.9584 }, { x: 142.517, y: 24.9644 }, { x: 143.241, y: 24.9674 }, { x: 143.963, y: 24.9708 }, { x: 145.05, y: 24.9757 }, { x: 146.859, y: 24.9872 }, { x: 147.584, y: 24.9901 }, { x: 148.308, y: 24.9883 }, { x: 149.031, y: 24.9938 }, { x: 149.754, y: 24.9976 }, { x: 150.479, y: 25.0018 }, { x: 151.203, y: 25.0094 }, { x: 151.927, y: 25.0118 }, { x: 152.65, y: 25.0161 }, { x: 153.736, y: 25.0286 }, { x: 155.183, y: 25.0368 }, { x: 156.269, y: 25.0525 }, { x: 156.994, y: 25.0633 }, { x: 157.718, y: 25.074 }, { x: 160.974, y: 25.1281 }, { x: 161.698, y: 25.1416 }, { x: 163.146, y: 25.1691 }, { x: 163.87, y: 25.1818 }, { x: 164.594, y: 25.1939 }, { x: 165.317, y: 25.2092 }, { x: 166.041, y: 25.2276 }, { x: 167.489, y: 25.2626 }, { x: 168.575, y: 25.2875 }, { x: 169.299, y: 25.3027 }, { x: 170.022, y: 25.3221 }, { x: 170.746, y: 25.3423 }, { x: 171.832, y: 25.3681 }, { x: 173.28, y: 25.4073 }, { x: 174.003, y: 25.4242 }, { x: 175.09, y: 25.4554 }, { x: 175.812, y: 25.4752 }, { x: 177.261, y: 25.5176 }, { x: 177.985, y: 25.5419 }, { x: 179.432, y: 25.5877 }, { x: 180.518, y: 25.6204 }, { x: 182.689, y: 25.69 }, { x: 183.775, y: 25.7234 }, { x: 185.222, y: 25.7738 }, { x: 186.671, y: 25.8215 }, { x: 188.118, y: 25.8727 }, { x: 188.842, y: 25.8953 }, { x: 189.927, y: 25.9282 }, { x: 190.652, y: 25.9477 }, { x: 191.375, y: 25.965 }, { x: 192.461, y: 25.9954 }, { x: 193.184, y: 26.0178 }, { x: 194.633, y: 26.0538 }, { x: 195.718, y: 26.0786 }, { x: 197.166, y: 26.1166 }, { x: 197.889, y: 26.1354 }, { x: 198.975, y: 26.1596 }, { x: 199.699, y: 26.1729 } ];
    expect(SimplifyTo(points, 1000)).toStrictEqual(points);
});
//#endregion

//#region SimplifyTo, PerpendicularDistance
test('simplify to 1 point, perpendicular distance', () => {
    const points = [ { x: 1.20401E-09, y: -0.00120428 }, { x: 0.018, y: 0.241799 }, { x: 0.1044, y: 1.34392 }, { x: 0.1494, y: 1.89758 }, { x: 0.2178, y: 2.67942 }, { x: 0.5247, y: 6.91973 }, { x: 1.269, y: 14.8002 }, { x: 1.6371, y: 18.0504 }, { x: 2.2104, y: 22.3001 }, { x: 2.5893, y: 24.7082 }, { x: 3.1806, y: 27.6589 }, { x: 3.9924, y: 30.4127 }, { x: 4.4073, y: 31.39 }, { x: 5.2713, y: 32.8131 }, { x: 5.9382, y: 33.5356 }, { x: 6.8382, y: 34.1971 }, { x: 7.7517, y: 34.599 }, { x: 8.6814, y: 34.8161 }, { x: 9.8613, y: 34.904 }, { x: 10.4173, y: 34.8803 }, { x: 11.1417, y: 34.8032 }, { x: 11.865, y: 34.6729 }, { x: 12.9515, y: 34.4192 }, { x: 14.0371, y: 34.13 }, { x: 14.7603, y: 33.9307 }, { x: 16.2079, y: 33.5205 }, { x: 16.9323, y: 33.3147 }, { x: 18.0181, y: 33.0196 }, { x: 19.4648, y: 32.6417 }, { x: 20.1892, y: 32.453 }, { x: 20.9134, y: 32.2699 }, { x: 21.6373, y: 32.0942 }, { x: 22.36, y: 31.9221 }, { x: 23.0845, y: 31.7573 }, { x: 24.5326, y: 31.435 }, { x: 25.2555, y: 31.2795 }, { x: 25.9798, y: 31.1348 }, { x: 27.4278, y: 30.8467 }, { x: 28.8751, y: 30.5719 }, { x: 30.3234, y: 30.3101 }, { x: 31.0461, y: 30.1809 }, { x: 32.1322, y: 29.9963 }, { x: 33.2184, y: 29.8226 }, { x: 34.6657, y: 29.5867 }, { x: 35.7514, y: 29.4231 }, { x: 36.4754, y: 29.3182 }, { x: 37.5612, y: 29.1651 }, { x: 39.3705, y: 28.9197 }, { x: 40.4564, y: 28.7797 }, { x: 42.2661, y: 28.5613 }, { x: 43.7134, y: 28.3835 }, { x: 45.1612, y: 28.2194 }, { x: 46.6087, y: 28.0604 }, { x: 47.3327, y: 27.9812 }, { x: 48.0567, y: 27.9055 }, { x: 48.7811, y: 27.83 }, { x: 50.5904, y: 27.6477 }, { x: 52.0378, y: 27.5109 }, { x: 53.1232, y: 27.4082 }, { x: 54.9332, y: 27.251 }, { x: 56.0185, y: 27.1584 }, { x: 57.1038, y: 27.0701 }, { x: 58.5527, y: 26.9543 }, { x: 59.6379, y: 26.8715 }, { x: 60.7239, y: 26.7892 }, { x: 62.1717, y: 26.6807 }, { x: 63.2575, y: 26.6065 }, { x: 64.3433, y: 26.5366 }, { x: 65.4286, y: 26.4584 }, { x: 66.1529, y: 26.4133 }, { x: 66.8761, y: 26.3701 }, { x: 67.9623, y: 26.3016 }, { x: 69.0481, y: 26.2356 }, { x: 69.7714, y: 26.1927 }, { x: 70.8578, y: 26.1324 }, { x: 71.5807, y: 26.0938 }, { x: 73.3904, y: 25.9954 }, { x: 74.1143, y: 25.953 }, { x: 74.8387, y: 25.918 }, { x: 76.286, y: 25.8486 }, { x: 77.01, y: 25.8149 }, { x: 77.7343, y: 25.7787 }, { x: 78.8199, y: 25.7266 }, { x: 80.6293, y: 25.6524 }, { x: 82.4392, y: 25.5782 }, { x: 83.1619, y: 25.5492 }, { x: 84.9719, y: 25.4842 }, { x: 86.7816, y: 25.421 }, { x: 87.5059, y: 25.3962 }, { x: 88.5912, y: 25.3638 }, { x: 89.3155, y: 25.3418 }, { x: 90.0387, y: 25.3214 }, { x: 91.1249, y: 25.2914 }, { x: 92.2106, y: 25.2578 }, { x: 93.2966, y: 25.2301 }, { x: 94.7432, y: 25.189 }, { x: 95.8293, y: 25.1627 }, { x: 96.9156, y: 25.1362 }, { x: 97.6382, y: 25.1209 }, { x: 98.3628, y: 25.1058 }, { x: 99.0872, y: 25.0926 }, { x: 100.534, y: 25.0648 }, { x: 101.258, y: 25.0517 }, { x: 102.344, y: 25.0337 }, { x: 103.429, y: 25.0138 }, { x: 104.878, y: 24.9899 }, { x: 106.688, y: 24.9631 }, { x: 107.773, y: 24.9493 }, { x: 108.858, y: 24.9377 }, { x: 109.583, y: 24.933 }, { x: 110.306, y: 24.9261 }, { x: 111.392, y: 24.9175 }, { x: 112.115, y: 24.9104 }, { x: 112.84, y: 24.9088 }, { x: 114.287, y: 24.8994 }, { x: 115.373, y: 24.8961 }, { x: 117.183, y: 24.8923 }, { x: 118.269, y: 24.8906 }, { x: 119.354, y: 24.8896 }, { x: 121.164, y: 24.8829 }, { x: 121.887, y: 24.8809 }, { x: 122.974, y: 24.8806 }, { x: 124.421, y: 24.8773 }, { x: 125.145, y: 24.8776 }, { x: 125.869, y: 24.883 }, { x: 127.316, y: 24.8808 }, { x: 128.764, y: 24.8861 }, { x: 129.85, y: 24.8953 }, { x: 130.936, y: 24.8972 }, { x: 131.659, y: 24.9034 }, { x: 133.107, y: 24.9107 }, { x: 133.831, y: 24.9139 }, { x: 134.916, y: 24.9186 }, { x: 136.002, y: 24.9269 }, { x: 137.45, y: 24.9386 }, { x: 138.173, y: 24.9428 }, { x: 139.622, y: 24.9513 }, { x: 141.068, y: 24.9584 }, { x: 142.517, y: 24.9644 }, { x: 143.241, y: 24.9674 }, { x: 143.963, y: 24.9708 }, { x: 145.05, y: 24.9757 }, { x: 146.859, y: 24.9872 }, { x: 147.584, y: 24.9901 }, { x: 148.308, y: 24.9883 }, { x: 149.031, y: 24.9938 }, { x: 149.754, y: 24.9976 }, { x: 150.479, y: 25.0018 }, { x: 151.203, y: 25.0094 }, { x: 151.927, y: 25.0118 }, { x: 152.65, y: 25.0161 }, { x: 153.736, y: 25.0286 }, { x: 155.183, y: 25.0368 }, { x: 156.269, y: 25.0525 }, { x: 156.994, y: 25.0633 }, { x: 157.718, y: 25.074 }, { x: 160.974, y: 25.1281 }, { x: 161.698, y: 25.1416 }, { x: 163.146, y: 25.1691 }, { x: 163.87, y: 25.1818 }, { x: 164.594, y: 25.1939 }, { x: 165.317, y: 25.2092 }, { x: 166.041, y: 25.2276 }, { x: 167.489, y: 25.2626 }, { x: 168.575, y: 25.2875 }, { x: 169.299, y: 25.3027 }, { x: 170.022, y: 25.3221 }, { x: 170.746, y: 25.3423 }, { x: 171.832, y: 25.3681 }, { x: 173.28, y: 25.4073 }, { x: 174.003, y: 25.4242 }, { x: 175.09, y: 25.4554 }, { x: 175.812, y: 25.4752 }, { x: 177.261, y: 25.5176 }, { x: 177.985, y: 25.5419 }, { x: 179.432, y: 25.5877 }, { x: 180.518, y: 25.6204 }, { x: 182.689, y: 25.69 }, { x: 183.775, y: 25.7234 }, { x: 185.222, y: 25.7738 }, { x: 186.671, y: 25.8215 }, { x: 188.118, y: 25.8727 }, { x: 188.842, y: 25.8953 }, { x: 189.927, y: 25.9282 }, { x: 190.652, y: 25.9477 }, { x: 191.375, y: 25.965 }, { x: 192.461, y: 25.9954 }, { x: 193.184, y: 26.0178 }, { x: 194.633, y: 26.0538 }, { x: 195.718, y: 26.0786 }, { x: 197.166, y: 26.1166 }, { x: 197.889, y: 26.1354 }, { x: 198.975, y: 26.1596 }, { x: 199.699, y: 26.1729 } ];
    expect(SimplifyTo(points, 1)).toStrictEqual([ points[0], points[points.length - 1] ]);
});
test('simplify to 20 points, perpendicular distance', () => {
    const points = [ { x: 1.20401E-09, y: -0.00120428 }, { x: 0.018, y: 0.241799 }, { x: 0.1044, y: 1.34392 }, { x: 0.1494, y: 1.89758 }, { x: 0.2178, y: 2.67942 }, { x: 0.5247, y: 6.91973 }, { x: 1.269, y: 14.8002 }, { x: 1.6371, y: 18.0504 }, { x: 2.2104, y: 22.3001 }, { x: 2.5893, y: 24.7082 }, { x: 3.1806, y: 27.6589 }, { x: 3.9924, y: 30.4127 }, { x: 4.4073, y: 31.39 }, { x: 5.2713, y: 32.8131 }, { x: 5.9382, y: 33.5356 }, { x: 6.8382, y: 34.1971 }, { x: 7.7517, y: 34.599 }, { x: 8.6814, y: 34.8161 }, { x: 9.8613, y: 34.904 }, { x: 10.4173, y: 34.8803 }, { x: 11.1417, y: 34.8032 }, { x: 11.865, y: 34.6729 }, { x: 12.9515, y: 34.4192 }, { x: 14.0371, y: 34.13 }, { x: 14.7603, y: 33.9307 }, { x: 16.2079, y: 33.5205 }, { x: 16.9323, y: 33.3147 }, { x: 18.0181, y: 33.0196 }, { x: 19.4648, y: 32.6417 }, { x: 20.1892, y: 32.453 }, { x: 20.9134, y: 32.2699 }, { x: 21.6373, y: 32.0942 }, { x: 22.36, y: 31.9221 }, { x: 23.0845, y: 31.7573 }, { x: 24.5326, y: 31.435 }, { x: 25.2555, y: 31.2795 }, { x: 25.9798, y: 31.1348 }, { x: 27.4278, y: 30.8467 }, { x: 28.8751, y: 30.5719 }, { x: 30.3234, y: 30.3101 }, { x: 31.0461, y: 30.1809 }, { x: 32.1322, y: 29.9963 }, { x: 33.2184, y: 29.8226 }, { x: 34.6657, y: 29.5867 }, { x: 35.7514, y: 29.4231 }, { x: 36.4754, y: 29.3182 }, { x: 37.5612, y: 29.1651 }, { x: 39.3705, y: 28.9197 }, { x: 40.4564, y: 28.7797 }, { x: 42.2661, y: 28.5613 }, { x: 43.7134, y: 28.3835 }, { x: 45.1612, y: 28.2194 }, { x: 46.6087, y: 28.0604 }, { x: 47.3327, y: 27.9812 }, { x: 48.0567, y: 27.9055 }, { x: 48.7811, y: 27.83 }, { x: 50.5904, y: 27.6477 }, { x: 52.0378, y: 27.5109 }, { x: 53.1232, y: 27.4082 }, { x: 54.9332, y: 27.251 }, { x: 56.0185, y: 27.1584 }, { x: 57.1038, y: 27.0701 }, { x: 58.5527, y: 26.9543 }, { x: 59.6379, y: 26.8715 }, { x: 60.7239, y: 26.7892 }, { x: 62.1717, y: 26.6807 }, { x: 63.2575, y: 26.6065 }, { x: 64.3433, y: 26.5366 }, { x: 65.4286, y: 26.4584 }, { x: 66.1529, y: 26.4133 }, { x: 66.8761, y: 26.3701 }, { x: 67.9623, y: 26.3016 }, { x: 69.0481, y: 26.2356 }, { x: 69.7714, y: 26.1927 }, { x: 70.8578, y: 26.1324 }, { x: 71.5807, y: 26.0938 }, { x: 73.3904, y: 25.9954 }, { x: 74.1143, y: 25.953 }, { x: 74.8387, y: 25.918 }, { x: 76.286, y: 25.8486 }, { x: 77.01, y: 25.8149 }, { x: 77.7343, y: 25.7787 }, { x: 78.8199, y: 25.7266 }, { x: 80.6293, y: 25.6524 }, { x: 82.4392, y: 25.5782 }, { x: 83.1619, y: 25.5492 }, { x: 84.9719, y: 25.4842 }, { x: 86.7816, y: 25.421 }, { x: 87.5059, y: 25.3962 }, { x: 88.5912, y: 25.3638 }, { x: 89.3155, y: 25.3418 }, { x: 90.0387, y: 25.3214 }, { x: 91.1249, y: 25.2914 }, { x: 92.2106, y: 25.2578 }, { x: 93.2966, y: 25.2301 }, { x: 94.7432, y: 25.189 }, { x: 95.8293, y: 25.1627 }, { x: 96.9156, y: 25.1362 }, { x: 97.6382, y: 25.1209 }, { x: 98.3628, y: 25.1058 }, { x: 99.0872, y: 25.0926 }, { x: 100.534, y: 25.0648 }, { x: 101.258, y: 25.0517 }, { x: 102.344, y: 25.0337 }, { x: 103.429, y: 25.0138 }, { x: 104.878, y: 24.9899 }, { x: 106.688, y: 24.9631 }, { x: 107.773, y: 24.9493 }, { x: 108.858, y: 24.9377 }, { x: 109.583, y: 24.933 }, { x: 110.306, y: 24.9261 }, { x: 111.392, y: 24.9175 }, { x: 112.115, y: 24.9104 }, { x: 112.84, y: 24.9088 }, { x: 114.287, y: 24.8994 }, { x: 115.373, y: 24.8961 }, { x: 117.183, y: 24.8923 }, { x: 118.269, y: 24.8906 }, { x: 119.354, y: 24.8896 }, { x: 121.164, y: 24.8829 }, { x: 121.887, y: 24.8809 }, { x: 122.974, y: 24.8806 }, { x: 124.421, y: 24.8773 }, { x: 125.145, y: 24.8776 }, { x: 125.869, y: 24.883 }, { x: 127.316, y: 24.8808 }, { x: 128.764, y: 24.8861 }, { x: 129.85, y: 24.8953 }, { x: 130.936, y: 24.8972 }, { x: 131.659, y: 24.9034 }, { x: 133.107, y: 24.9107 }, { x: 133.831, y: 24.9139 }, { x: 134.916, y: 24.9186 }, { x: 136.002, y: 24.9269 }, { x: 137.45, y: 24.9386 }, { x: 138.173, y: 24.9428 }, { x: 139.622, y: 24.9513 }, { x: 141.068, y: 24.9584 }, { x: 142.517, y: 24.9644 }, { x: 143.241, y: 24.9674 }, { x: 143.963, y: 24.9708 }, { x: 145.05, y: 24.9757 }, { x: 146.859, y: 24.9872 }, { x: 147.584, y: 24.9901 }, { x: 148.308, y: 24.9883 }, { x: 149.031, y: 24.9938 }, { x: 149.754, y: 24.9976 }, { x: 150.479, y: 25.0018 }, { x: 151.203, y: 25.0094 }, { x: 151.927, y: 25.0118 }, { x: 152.65, y: 25.0161 }, { x: 153.736, y: 25.0286 }, { x: 155.183, y: 25.0368 }, { x: 156.269, y: 25.0525 }, { x: 156.994, y: 25.0633 }, { x: 157.718, y: 25.074 }, { x: 160.974, y: 25.1281 }, { x: 161.698, y: 25.1416 }, { x: 163.146, y: 25.1691 }, { x: 163.87, y: 25.1818 }, { x: 164.594, y: 25.1939 }, { x: 165.317, y: 25.2092 }, { x: 166.041, y: 25.2276 }, { x: 167.489, y: 25.2626 }, { x: 168.575, y: 25.2875 }, { x: 169.299, y: 25.3027 }, { x: 170.022, y: 25.3221 }, { x: 170.746, y: 25.3423 }, { x: 171.832, y: 25.3681 }, { x: 173.28, y: 25.4073 }, { x: 174.003, y: 25.4242 }, { x: 175.09, y: 25.4554 }, { x: 175.812, y: 25.4752 }, { x: 177.261, y: 25.5176 }, { x: 177.985, y: 25.5419 }, { x: 179.432, y: 25.5877 }, { x: 180.518, y: 25.6204 }, { x: 182.689, y: 25.69 }, { x: 183.775, y: 25.7234 }, { x: 185.222, y: 25.7738 }, { x: 186.671, y: 25.8215 }, { x: 188.118, y: 25.8727 }, { x: 188.842, y: 25.8953 }, { x: 189.927, y: 25.9282 }, { x: 190.652, y: 25.9477 }, { x: 191.375, y: 25.965 }, { x: 192.461, y: 25.9954 }, { x: 193.184, y: 26.0178 }, { x: 194.633, y: 26.0538 }, { x: 195.718, y: 26.0786 }, { x: 197.166, y: 26.1166 }, { x: 197.889, y: 26.1354 }, { x: 198.975, y: 26.1596 }, { x: 199.699, y: 26.1729 } ];
    expect(SimplifyTo(points, 20).length).toEqual(20);
});
test('simplify to 1000 point, perpendicular distance', () => {
    const points = [ { x: 1.20401E-09, y: -0.00120428 }, { x: 0.018, y: 0.241799 }, { x: 0.1044, y: 1.34392 }, { x: 0.1494, y: 1.89758 }, { x: 0.2178, y: 2.67942 }, { x: 0.5247, y: 6.91973 }, { x: 1.269, y: 14.8002 }, { x: 1.6371, y: 18.0504 }, { x: 2.2104, y: 22.3001 }, { x: 2.5893, y: 24.7082 }, { x: 3.1806, y: 27.6589 }, { x: 3.9924, y: 30.4127 }, { x: 4.4073, y: 31.39 }, { x: 5.2713, y: 32.8131 }, { x: 5.9382, y: 33.5356 }, { x: 6.8382, y: 34.1971 }, { x: 7.7517, y: 34.599 }, { x: 8.6814, y: 34.8161 }, { x: 9.8613, y: 34.904 }, { x: 10.4173, y: 34.8803 }, { x: 11.1417, y: 34.8032 }, { x: 11.865, y: 34.6729 }, { x: 12.9515, y: 34.4192 }, { x: 14.0371, y: 34.13 }, { x: 14.7603, y: 33.9307 }, { x: 16.2079, y: 33.5205 }, { x: 16.9323, y: 33.3147 }, { x: 18.0181, y: 33.0196 }, { x: 19.4648, y: 32.6417 }, { x: 20.1892, y: 32.453 }, { x: 20.9134, y: 32.2699 }, { x: 21.6373, y: 32.0942 }, { x: 22.36, y: 31.9221 }, { x: 23.0845, y: 31.7573 }, { x: 24.5326, y: 31.435 }, { x: 25.2555, y: 31.2795 }, { x: 25.9798, y: 31.1348 }, { x: 27.4278, y: 30.8467 }, { x: 28.8751, y: 30.5719 }, { x: 30.3234, y: 30.3101 }, { x: 31.0461, y: 30.1809 }, { x: 32.1322, y: 29.9963 }, { x: 33.2184, y: 29.8226 }, { x: 34.6657, y: 29.5867 }, { x: 35.7514, y: 29.4231 }, { x: 36.4754, y: 29.3182 }, { x: 37.5612, y: 29.1651 }, { x: 39.3705, y: 28.9197 }, { x: 40.4564, y: 28.7797 }, { x: 42.2661, y: 28.5613 }, { x: 43.7134, y: 28.3835 }, { x: 45.1612, y: 28.2194 }, { x: 46.6087, y: 28.0604 }, { x: 47.3327, y: 27.9812 }, { x: 48.0567, y: 27.9055 }, { x: 48.7811, y: 27.83 }, { x: 50.5904, y: 27.6477 }, { x: 52.0378, y: 27.5109 }, { x: 53.1232, y: 27.4082 }, { x: 54.9332, y: 27.251 }, { x: 56.0185, y: 27.1584 }, { x: 57.1038, y: 27.0701 }, { x: 58.5527, y: 26.9543 }, { x: 59.6379, y: 26.8715 }, { x: 60.7239, y: 26.7892 }, { x: 62.1717, y: 26.6807 }, { x: 63.2575, y: 26.6065 }, { x: 64.3433, y: 26.5366 }, { x: 65.4286, y: 26.4584 }, { x: 66.1529, y: 26.4133 }, { x: 66.8761, y: 26.3701 }, { x: 67.9623, y: 26.3016 }, { x: 69.0481, y: 26.2356 }, { x: 69.7714, y: 26.1927 }, { x: 70.8578, y: 26.1324 }, { x: 71.5807, y: 26.0938 }, { x: 73.3904, y: 25.9954 }, { x: 74.1143, y: 25.953 }, { x: 74.8387, y: 25.918 }, { x: 76.286, y: 25.8486 }, { x: 77.01, y: 25.8149 }, { x: 77.7343, y: 25.7787 }, { x: 78.8199, y: 25.7266 }, { x: 80.6293, y: 25.6524 }, { x: 82.4392, y: 25.5782 }, { x: 83.1619, y: 25.5492 }, { x: 84.9719, y: 25.4842 }, { x: 86.7816, y: 25.421 }, { x: 87.5059, y: 25.3962 }, { x: 88.5912, y: 25.3638 }, { x: 89.3155, y: 25.3418 }, { x: 90.0387, y: 25.3214 }, { x: 91.1249, y: 25.2914 }, { x: 92.2106, y: 25.2578 }, { x: 93.2966, y: 25.2301 }, { x: 94.7432, y: 25.189 }, { x: 95.8293, y: 25.1627 }, { x: 96.9156, y: 25.1362 }, { x: 97.6382, y: 25.1209 }, { x: 98.3628, y: 25.1058 }, { x: 99.0872, y: 25.0926 }, { x: 100.534, y: 25.0648 }, { x: 101.258, y: 25.0517 }, { x: 102.344, y: 25.0337 }, { x: 103.429, y: 25.0138 }, { x: 104.878, y: 24.9899 }, { x: 106.688, y: 24.9631 }, { x: 107.773, y: 24.9493 }, { x: 108.858, y: 24.9377 }, { x: 109.583, y: 24.933 }, { x: 110.306, y: 24.9261 }, { x: 111.392, y: 24.9175 }, { x: 112.115, y: 24.9104 }, { x: 112.84, y: 24.9088 }, { x: 114.287, y: 24.8994 }, { x: 115.373, y: 24.8961 }, { x: 117.183, y: 24.8923 }, { x: 118.269, y: 24.8906 }, { x: 119.354, y: 24.8896 }, { x: 121.164, y: 24.8829 }, { x: 121.887, y: 24.8809 }, { x: 122.974, y: 24.8806 }, { x: 124.421, y: 24.8773 }, { x: 125.145, y: 24.8776 }, { x: 125.869, y: 24.883 }, { x: 127.316, y: 24.8808 }, { x: 128.764, y: 24.8861 }, { x: 129.85, y: 24.8953 }, { x: 130.936, y: 24.8972 }, { x: 131.659, y: 24.9034 }, { x: 133.107, y: 24.9107 }, { x: 133.831, y: 24.9139 }, { x: 134.916, y: 24.9186 }, { x: 136.002, y: 24.9269 }, { x: 137.45, y: 24.9386 }, { x: 138.173, y: 24.9428 }, { x: 139.622, y: 24.9513 }, { x: 141.068, y: 24.9584 }, { x: 142.517, y: 24.9644 }, { x: 143.241, y: 24.9674 }, { x: 143.963, y: 24.9708 }, { x: 145.05, y: 24.9757 }, { x: 146.859, y: 24.9872 }, { x: 147.584, y: 24.9901 }, { x: 148.308, y: 24.9883 }, { x: 149.031, y: 24.9938 }, { x: 149.754, y: 24.9976 }, { x: 150.479, y: 25.0018 }, { x: 151.203, y: 25.0094 }, { x: 151.927, y: 25.0118 }, { x: 152.65, y: 25.0161 }, { x: 153.736, y: 25.0286 }, { x: 155.183, y: 25.0368 }, { x: 156.269, y: 25.0525 }, { x: 156.994, y: 25.0633 }, { x: 157.718, y: 25.074 }, { x: 160.974, y: 25.1281 }, { x: 161.698, y: 25.1416 }, { x: 163.146, y: 25.1691 }, { x: 163.87, y: 25.1818 }, { x: 164.594, y: 25.1939 }, { x: 165.317, y: 25.2092 }, { x: 166.041, y: 25.2276 }, { x: 167.489, y: 25.2626 }, { x: 168.575, y: 25.2875 }, { x: 169.299, y: 25.3027 }, { x: 170.022, y: 25.3221 }, { x: 170.746, y: 25.3423 }, { x: 171.832, y: 25.3681 }, { x: 173.28, y: 25.4073 }, { x: 174.003, y: 25.4242 }, { x: 175.09, y: 25.4554 }, { x: 175.812, y: 25.4752 }, { x: 177.261, y: 25.5176 }, { x: 177.985, y: 25.5419 }, { x: 179.432, y: 25.5877 }, { x: 180.518, y: 25.6204 }, { x: 182.689, y: 25.69 }, { x: 183.775, y: 25.7234 }, { x: 185.222, y: 25.7738 }, { x: 186.671, y: 25.8215 }, { x: 188.118, y: 25.8727 }, { x: 188.842, y: 25.8953 }, { x: 189.927, y: 25.9282 }, { x: 190.652, y: 25.9477 }, { x: 191.375, y: 25.965 }, { x: 192.461, y: 25.9954 }, { x: 193.184, y: 26.0178 }, { x: 194.633, y: 26.0538 }, { x: 195.718, y: 26.0786 }, { x: 197.166, y: 26.1166 }, { x: 197.889, y: 26.1354 }, { x: 198.975, y: 26.1596 }, { x: 199.699, y: 26.1729 } ];
    expect(SimplifyTo(points, 1000)).toStrictEqual(points);
});
//#endregion
